/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { KeepProvider } from '../types/types';

export const mockProviders: KeepProvider[] = [
  {
    id: null,
    display_name: 'Hugging Face',
    type: 'hugging_face',
    config: {
      api_key: {
        required: true,
        description: "API Key for the provider you're connecting to.",
        sensitive: true,
        default: null,
      },
      'rate_limit.requests_per_minute': {
        required: false,
        description: 'Minimize the number of rate limit errors.',
        sensitive: false,
        default: null,
      },
      url: {
        required: true,
        description: 'The URL endpoint to use for the requests.',
        sensitive: false,
        default: 'https://api.openai.com/v1/embeddings',
      },
    },
    details: null,
    can_notify: false,
    notify_params: null,
    can_query: false,
    query_params: null,
    installed: false,
    linked: false,
    last_alert_received: null,
    supports_webhook: false,
    can_setup_webhook: false,
    webhook_required: false,
    provider_description: null,
    oauth2_url: null,
    scopes: [],
    validatedScopes: {},
    methods: [],
    installed_by: null,
    installation_time: null,
    pulling_available: false,
    pulling_enabled: false,
    last_pull_time: null,
    docs: null,
    tags: ['text_embedding', 'sparse_embedding'],
    categories: ['AI/ML'],
    coming_soon: false,
    alertsDistribution: null,
    alertExample: null,
    default_fingerprint_fields: [],
    provisioned: false,
    health: false,
    provider_metadata: {},
  },
  {
    id: null,
    display_name: 'Cohere',
    type: 'cohere',
    config: {
      api_key: {
        required: true,
        description: "API Key for the provider you're connecting to.",
        sensitive: true,
        default: null,
      },
      'rate_limit.requests_per_minute': {
        required: false,
        description: 'Minimize the number of rate limit errors.',
        sensitive: false,
        default: null,
      },
    },
    details: null,
    can_notify: false,
    notify_params: null,
    can_query: false,
    query_params: null,
    installed: false,
    linked: false,
    last_alert_received: null,
    supports_webhook: false,
    can_setup_webhook: false,
    webhook_required: false,
    provider_description: null,
    oauth2_url: null,
    scopes: [],
    validatedScopes: {},
    methods: [],
    installed_by: null,
    installation_time: null,
    pulling_available: false,
    pulling_enabled: false,
    last_pull_time: null,
    docs: null,
    tags: ['text_embedding', 'rerank', 'completion'],
    categories: ['AI/ML'],
    coming_soon: false,
    alertsDistribution: null,
    alertExample: null,
    default_fingerprint_fields: [],
    provisioned: false,
    health: false,
    provider_metadata: {},
  },
  {
    id: null,
    display_name: 'Anthropic',
    type: 'anthropic',
    config: {
      api_key: {
        required: true,
        description: "API Key for the provider you're connecting to.",
        sensitive: true,
        default: null,
      },
      'rate_limit.requests_per_minute': {
        required: false,
        description:
          'By default, the anthropic service sets the number of requests allowed per minute to 50.',
        sensitive: false,
        default: null,
      },
      model_id: {
        required: true,
        description: 'The name of the model to use for the inference task.',
        sensitive: false,
        default: null,
      },
    },
    details: null,
    can_notify: false,
    notify_params: null,
    can_query: false,
    query_params: null,
    installed: false,
    linked: false,
    last_alert_received: null,
    supports_webhook: false,
    can_setup_webhook: false,
    webhook_required: false,
    provider_description: null,
    oauth2_url: null,
    scopes: [],
    validatedScopes: {},
    methods: [],
    installed_by: null,
    installation_time: null,
    pulling_available: false,
    pulling_enabled: false,
    last_pull_time: null,
    docs: null,
    tags: ['completion'],
    categories: ['AI/ML'],
    coming_soon: false,
    alertsDistribution: null,
    alertExample: null,
    default_fingerprint_fields: [],
    provisioned: false,
    health: false,
    provider_metadata: {},
  },
  {
    id: null,
    display_name: 'Elastic',
    type: 'elastic',
    config: {
      'rate_limit.requests_per_minute': {
        required: false,
        description: 'Minimize the number of rate limit errors.',
        sensitive: false,
        default: null,
      },
      model_id: {
        required: true,
        description: 'The name of the model to use for the inference task.',
        sensitive: false,
        default: null,
      },
      max_input_tokens: {
        required: false,
        description: 'Allows you to specify the maximum number of tokens per input.',
        sensitive: false,
        default: null,
      },
    },
    details: null,
    can_notify: false,
    notify_params: null,
    can_query: false,
    query_params: null,
    installed: false,
    linked: false,
    last_alert_received: null,
    supports_webhook: false,
    can_setup_webhook: false,
    webhook_required: false,
    provider_description: null,
    oauth2_url: null,
    scopes: [],
    validatedScopes: {},
    methods: [],
    installed_by: null,
    installation_time: null,
    pulling_available: false,
    pulling_enabled: false,
    last_pull_time: null,
    docs: null,
    tags: ['sparse_embedding', 'chat_completion'],
    categories: ['AI/ML'],
    coming_soon: false,
    alertsDistribution: null,
    alertExample: null,
    default_fingerprint_fields: [],
    provisioned: false,
    health: false,
    provider_metadata: {},
  },
  {
    id: null,
    display_name: 'Elasticsearch',
    type: 'elasticsearch',
    config: {
      num_allocations: {
        required: true,
        description:
          'The total number of allocations this model is assigned across machine learning nodes.',
        sensitive: false,
        default: 1,
      },
      num_threads: {
        required: true,
        description: 'Sets the number of threads used by each model allocation during inference.',
        sensitive: false,
        default: 2,
      },
      model_id: {
        required: true,
        description: 'The name of the model to use for the inference task.',
        sensitive: false,
        default: '.elser_model_2',
      },
    },
    details: null,
    can_notify: false,
    notify_params: null,
    can_query: false,
    query_params: null,
    installed: false,
    linked: false,
    last_alert_received: null,
    supports_webhook: false,
    can_setup_webhook: false,
    webhook_required: false,
    provider_description: null,
    oauth2_url: null,
    scopes: [],
    validatedScopes: {},
    methods: [],
    installed_by: null,
    installation_time: null,
    pulling_available: false,
    pulling_enabled: false,
    last_pull_time: null,
    docs: null,
    tags: ['sparse_embedding', 'text_embedding', 'rerank'],
    categories: ['AI/ML'],
    coming_soon: false,
    alertsDistribution: null,
    alertExample: null,
    default_fingerprint_fields: [],
    provisioned: false,
    health: false,
    provider_metadata: {},
  },
];
